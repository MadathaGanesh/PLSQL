-- BASIC FUNCTIONS

-- Add 2 Numbers
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION ADD_NUMBERS(
NUM1 IN NUMBER,
NUM2 IN NUMBER)
RETURN NUMBER IS
BEGIN
    RETURN NUM1+NUM2;
END;
/

DECLARE
 V_NUM1 NUMBER  := 10;
 V_NUM2 NUMBER:= 20;
 V_RESULT NUMBER;
BEGIN
    V_RESULT := ADD_NUMBERS(V_NUM1,V_NUM2);
    DBMS_OUTPUT.PUT_LINE('Addition of ' || V_NUM1 || ' AND ' || V_NUM2 || ' IS : ' || V_RESULT);
END;
/


-- Function to calculate "FACTORIAL OF A NUMBER":
CREATE OR REPLACE FUNCTION FACTORIAL_NUMBER(
P_NUM IN NUMBER)
RETURN NUMBER
IS
V_RESULT_1 NUMBER := 1;
BEGIN
--    FOR I IN 1..P_NUM
    FOR I IN REVERSE 1..P_NUM
    LOOP
        V_RESULT_1 := V_RESULT_1 *I;
    END LOOP;
    RETURN V_RESULT_1;
END;
/

DECLARE
V_NUMBER NUMBER :=4;
V_FACTORIAL_RESULT NUMBER;
BEGIN
    V_FACTORIAL_RESULT := FACTORIAL_NUMBER(V_NUMBER);
    DBMS_OUTPUT.PUT_LINE('FACTORIAL OF ' || V_NUMBER || ' IS : ' || V_FACTORIAL_RESULT);
END;
/


-- Check Given Number is a prime Number or Not
CREATE OR REPLACE FUNCTION PRIME_NUMBER (
P_NUMBER_1 NUMBER)
RETURN VARCHAR2 IS
VAR_I  NUMBER;
BEGIN
    IF P_NUMBER_1 < 0 THEN 
        RETURN 'NO!';
    END IF;
    FOR VAR_I IN 2..TRUNC(SQRT(P_NUMBER_1))
    LOOP
        IF MOD(P_NUMBER_1,VAR_I) = 0 THEN
            RETURN 'NO';
        END IF;
    END LOOP;
    RETURN 'YES';
END;
/

DECLARE
V_NUMBER_1 NUMBER :=30;
V_CHECK_RESULT VARCHAR2(100);
BEGIN
V_CHECK_RESULT :=PRIME_NUMBER(V_NUMBER_1);
IF V_CHECK_RESULT='YES' THEN
    DBMS_OUTPUT.PUT_LINE( V_CHECK_RESULT || ' , '|| V_NUMBER_1 || ' IS A PRIME NUMBER');
ELSE
    DBMS_OUTPUT.PUT_LINE(V_CHECK_RESULT || ' , '|| V_NUMBER_1 || ' IS NOT A PRIME NUMBER');
END IF;
END;
/

-- Function to return current Date
CREATE OR REPLACE FUNCTION GET_CURRENT_DATE
RETURN DATE 
IS
BEGIN
    RETURN SYSDATE;
END;
/

SELECT GET_CURRENT_DATE FROM DUAL;



-- Function to calculate Are of circle
CREATE OR REPLACE FUNCTION AREA_OF_CIRCLE(
P_RADIUS IN NUMBER)
RETURN NUMBER
IS
V_PI_VALUE CONSTANT NUMBER := 3.1412;
BEGIN
    RETURN V_PI_VALUE*P_RADIUS*P_RADIUS;
END;
/

DECLARE
V_AOC_RESULT  NUMBER;
V_RADIUS NUMBER := 4;
BEGIN
V_AOC_RESULT := AREA_OF_CIRCLE(V_RADIUS);
DBMS_OUTPUT.PUT_LINE('AREA OF CIRCLE FOR RADIUS ' || V_RADIUS || ' IS :' || V_AOC_RESULT);
END;
/

-- Function to reverse a String
CREATE OR REPLACE FUNCTION GET_REVERSE_STRING
(P_STRING_1 IN VARCHAR2)
RETURN VARCHAR2  
IS
REVERSED_STRING_DATA    VARCHAR2(255) :='';
BEGIN
    FOR i IN REVERSE 1..LENGTH(P_STRING_1)
    LOOP
        REVERSED_STRING_DATA := REVERSED_STRING_DATA || SUBSTR(P_STRING_1,i,1);
    END LOOP;
    RETURN REVERSED_STRING_DATA;
END;
/
DECLARE
V_STRING VARCHAR2(255) := 'GANESH';
V_REVERSE_STRING VARCHAR2(255);
BEGIN
    V_REVERSE_STRING := GET_REVERSE_STRING(V_STRING);
    DBMS_OUTPUT.PUT_LINE('REVERSE STRING FOR THIS ' || V_STRING || ' IS : ' || V_REVERSE_STRING);
END;
/

-- FUNCTION to Check Palindrome or Not
CREATE OR REPLACE FUNCTION CHECK_PALINDROME(
P_INPUT_STRING IN VARCHAR2)
RETURN VARCHAR2 
IS
REVERSED_STRING VARCHAR2(100) :='';
BEGIN
    FOR i in REVERSE 1..LENGTH(P_INPUT_STRING) 
    LOOP
        REVERSED_STRING := REVERSED_STRING || SUBSTR(P_INPUT_STRING,i,1); 
    END LOOP;
    
    IF P_INPUT_STRING=REVERSED_STRING THEN
        RETURN 'YES';
    ELSE 
        RETURN 'NO';
    END IF;
END;
/

DECLARE
    V_STRING VARCHAR2(255) := 'MoM';
    V_RESULT VARCHAR2(255) ;
BEGIN
    V_RESULT := CHECK_PALINDROME(V_STRING);
    IF V_RESULT='YES' THEN
        DBMS_OUTPUT.PUT_LINE( V_RESULT || ' , ' || V_STRING || ' is a Palindrome String !' );
    ELSE
        DBMS_OUTPUT.PUT_LINE( V_RESULT || ' , ' || V_STRING || ' is NOT Palindrome String !' );
    END IF;
END;
/
