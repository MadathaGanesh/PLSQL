-- Functions on Employee Table

CREATE TABLE EMPLOYEE_FUNCTIONS (
    EMP_ID NUMBER PRIMARY KEY,
    EMP_NAME VARCHAR2(50),
    SALARY NUMBER,
    DEPT_NO NUMBER,
    HIRE_DATE DATE,
    GRADE CHAR(1),
    EMAIL VARCHAR2(100)
);

DESC EMPLOYEE_FUNCTIONS;
SELECT * FROM EMPLOYEE_FUNCTIONS;


INSERT INTO EMPLOYEE_FUNCTIONS(EMP_ID,EMP_NAME,SALARY,DEPT_NO,HIRE_DATE,GRADE,EMAIL) 
VALUES(1, 'Alice Johnson', 50000, 10, TO_DATE('2022-01-01', 'YYYY-MM-DD'), 'A', 'alice.j@example.com');

INSERT INTO EMPLOYEE_FUNCTIONS(EMP_ID,EMP_NAME,SALARY,DEPT_NO,HIRE_DATE,GRADE,EMAIL) 
VALUES(2, 'Bob Smith', 60000, 20, TO_DATE('2021-06-15', 'YYYY-MM-DD'), 'B', 'bob.s@example.com');

INSERT INTO EMPLOYEE_FUNCTIONS(EMP_ID,EMP_NAME,SALARY,DEPT_NO,HIRE_DATE,GRADE,EMAIL)
VALUES(3, 'Charlie Brown', 45000, 30, TO_DATE('2023-03-10', 'YYYY-MM-DD'), 'C', 'charlie.b@example.com');

INSERT INTO EMPLOYEE_FUNCTIONS(EMP_ID,EMP_NAME,SALARY,DEPT_NO,HIRE_DATE,GRADE,EMAIL) 
VALUES(4, 'Diana Prince', 70000, 10, TO_DATE('2020-12-05', 'YYYY-MM-DD'), 'A', 'diana.p@example.com');

INSERT INTO EMPLOYEE_FUNCTIONS(EMP_ID,EMP_NAME,SALARY,DEPT_NO,HIRE_DATE,GRADE,EMAIL) 
VALUES(5, 'Ethan Hunt', 55000, 20, TO_DATE('2022-08-20', 'YYYY-MM-DD'), 'B', 'ethan.h@example.com');


-- Write a function to calculate the annual salary of an employee based on their EMP_ID.
SET SERVEROUT ON;
CREATE OR REPLACE FUNCTION CALCULATE_ANNUAL_SALARY (
P_EMP_ID IN NUMBER,
P_EMP_NAME OUT VARCHAR2) 
RETURN NUMBER IS
V_ANNUAL_SALARY         EMPLOYEE_FUNCTIONS.SALARY%TYPE ;

BEGIN
    SELECT SALARY*12,EMP_NAME INTO V_ANNUAL_SALARY,P_EMP_NAME FROM EMPLOYEE_FUNCTIONS WHERE EMP_ID=P_EMP_ID;
    RETURN V_ANNUAL_SALARY;
END;
/

DECLARE
V_EMP_NAME      EMPLOYEE_FUNCTIONS.EMP_NAME%TYPE;
V_EMP_ID  NUMBER :=1;
V_QUERY_1 NUMBER;
BEGIN
    V_QUERY_1 := CALCULATE_ANNUAL_SALARY(V_EMP_ID,V_EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('Annual Salary for ' || V_EMP_ID || ' is : ' || V_QUERY_1 || ' Whose Name is :' || V_EMP_NAME);
END;
/


-- Write a function to return the department number (DEPT_NO) of an employee given their name.
CREATE OR REPLACE FUNCTION GET_EMPLOYEE_DEPTNO(
P_DEPT_NO OUT NUMBER,
P_EMP_NAME IN VARCHAR2,
P_EMP_ID OUT NUMBER)
RETURN NUMBER IS
BEGIN
    SELECT DEPT_NO,EMP_ID INTO P_DEPT_NO,P_EMP_ID FROM EMPLOYEE_FUNCTIONS WHERE EMP_NAME=P_EMP_NAME;
    RETURN P_DEPT_NO;
END;
/

DECLARE
V_RESULT_2         INTEGER;   -- Declared as Integer bcoz it needs to store DEPTNO integer value
V_EMP_NAME      VARCHAR2(255):= 'Bob Smith';
P_DEPT_NO_1     EMPLOYEE_FUNCTIONS.DEPT_NO%TYPE;
P_EMP_ID_1      EMPLOYEE_FUNCTIONS.EMP_ID%TYPE;
BEGIN
    V_RESULT_2 := GET_EMPLOYEE_DEPTNO(P_DEPT_NO_1,V_EMP_NAME,P_EMP_ID_1);
    DBMS_OUTPUT.PUT_LINE('DEPT NO OF : ' || V_EMP_NAME || ' IS :' || P_DEPT_NO_1 || ' .WHOSE EMP ID IS : ' || P_EMP_ID_1);
END;
/


-- Create a function to check whether an employee with a specific EMP_ID exists in the table.
CREATE OR REPLACE FUNCTION CHECK_EXISTANCE_EMPLOYEE(
P_EMP_ID IN NUMBER,
P_EMP_NAME OUT VARCHAR2)
RETURN VARCHAR2
IS
V_COUNT  NUMBER;
BEGIN
    SELECT COUNT(*)INTO V_COUNT FROM EMPLOYEE_FUNCTIONS 
    WHERE EMP_ID=P_EMP_ID;
    IF V_COUNT > 0 THEN
        SELECT EMP_NAME INTO P_EMP_NAME FROM EMPLOYEE_FUNCTIONS 
        WHERE EMP_ID=P_EMP_ID;
        RETURN 'YES';
    ELSE
        P_EMP_NAME := NULL;
        RETURN 'NO';
    END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        P_EMP_NAME := NULL;
        RETURN 'NO';
END;
/

DECLARE
    V_RESULT_3          VARCHAR2(10);
    V_EMP_ID_3          NUMBER := 134;
    V_EMP_NAME_3        EMPLOYEE_FUNCTIONS.EMP_NAME%TYPE;
BEGIN
    V_RESULT_3 := CHECK_EXISTANCE_EMPLOYEE(V_EMP_ID_3,V_EMP_NAME_3);
    IF V_RESULT_3='YES' THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID : ' || V_EMP_ID_3 || ' .EXISTS HERE . WHOSE NAME IS : ' || V_EMP_NAME_3 );
    ELSE
        DBMS_OUTPUT.PUT_LINE(V_EMP_ID_3 || ' EMPLOYEES NOT EXISTS.');
    END IF;
END;
/


-- Write a function to calculate the number of years an employee has worked in the company based on their HIRE_DATE.
CREATE OR REPLACE FUNCTION GET_WORKED_DURATION(
P_EMP_ID IN NUMBER
)
RETURN NUMBER IS
V_HIRE_DATE             EMPLOYEE_FUNCTIONS.hire_date%type;
V_YEARS_WORKED          NUMBER;
BEGIN
    SELECT hire_date INTO V_HIRE_DATE FROM EMPLOYEE_FUNCTIONS WHERE EMP_ID=P_EMP_ID;
    
    V_YEARS_WORKED := TRUNC(MONTHS_BETWEEN(SYSDATE,V_HIRE_DATE)/12); -- Calculating No of years worked
    RETURN V_YEARS_WORKED; 
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN -1;
    WHEN OTHERS THEN 
        RETURN -2;  
END;
/

SET SERVEROUTPUT ON;
DECLARE
    V_EMP_ID NUMBER :=1;
    V_YEARS_WORKED NUMBER;
BEGIN
    V_YEARS_WORKED := GET_WORKED_DURATION(V_EMP_ID);
    IF V_YEARS_WORKED = -1 THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA IS THERE WITH THESE EMPLOYEE ID !' || V_EMP_ID);
    ELSIF V_YEARS_WORKED =-2 THEN
        DBMS_OUTPUT.PUT_LINE('AN uXPECTED ERROR OCCURED ! ');
    ELSE 
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE WITH EMP ID ' || V_EMP_ID || ' HAS WORKED FOR ' || V_YEARS_WORKED || ' YEARS');
    END IF;
END;
/


-- Create a function to count the number of employees in a specific department.
CREATE OR REPLACE FUNCTION GET_EMPLOYEE_COUNT
(P_DEPTNO IN  NUMBER) 
RETURN NUMBER IS
V_TOTAL_EMPLOYEES NUMBER;

BEGIN
    SELECT COUNT(*) INTO V_TOTAL_EMPLOYEES FROM EMPLOYEE_FUNCTIONS WHERE DEPT_NO=P_DEPTNO;
    RETURN V_TOTAL_EMPLOYEES;
EXCEPTION 
WHEN NO_DATA_FOUND THEN
    RETURN -1;
END;
/

DECLARE
V_TOTAL_EMPLOYEES NUMBER;
V_DEPTNO NUMBER :=10;
BEGIN
    V_TOTAL_EMPLOYEES := GET_EMPLOYEE_COUNT(V_DEPTNO);
    IF V_TOTAL_EMPLOYEES =-1 THEN
        DBMS_OUTPUT.PUT_LINE('No employees found for department number ' || V_DEPTNO);
    ELSE    
        DBMS_OUTPUT.PUT_LINE('TOTAL ' || V_TOTAL_EMPLOYEES || ' EMPLOYEES FOUND FOR THIS DEPTNO ' || V_DEPTNO);
    END IF;
END;
/


SELECT * FROM EMPLOYEE_FUNCTIONS;

-- Write a function to calculate the total salary expense of a specific department (DEPT_NO).
CREATE OR REPLACE FUNCTION GET_DEPT_EXPENSE(   
P_DEPT_NO IN NUMBER) 
RETURN NUMBER IS
V_TOTAL_DEPT_EXPENSE NUMBER;
BEGIN 
    SELECT SUM(SALARY) INTO V_TOTAL_DEPT_EXPENSE FROM EMPLOYEE_FUNCTIONS WHERE DEPT_NO = P_DEPT_NO;   
    RETURN NVL(V_TOTAL_DEPT_EXPENSE,0);  -- If the V_TOTAL_DEPT_EXPENSE IS NULL THEN IT WILL RETURN ZERO (0)
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RETURN 0;
WHEN OTHERS THEN 
    RETURN -1;
END;
/
DECLARE
V_TOTAL_DEPT_SALARY NUMBER;
V_DEPT_NO NUMBER :=10;
BEGIN
    V_TOTAL_DEPT_SALARY :=GET_DEPT_EXPENSE(V_DEPT_NO);
    IF V_TOTAL_DEPT_SALARY=0 THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND FOR THIS DEPT NO ' || V_DEPT_NO);
    ELSIF V_TOTAL_DEPT_SALARY=-1 THEN
        DBMS_OUTPUT.PUT_LINE('AN UNEXPECTED ERROR OCCURED ! ');
    ELSE
        DBMS_OUTPUT.PUT_LINE('DEPT ' || V_DEPT_NO || ' TOTAL SALARY IS : ' || V_TOTAL_DEPT_SALARY);
    END IF;
END;
/



-- Write a function to retrieve the email of an employee based on their EMP_ID and ensure it is in a valid format.
CREATE OR REPLACE FUNCTION GET_EMAILID (
P_EMP_ID IN NUMBER)
RETURN VARCHAR2  IS
    V_EMAIL     EMPLOYEE_FUNCTIONS.EMAIL%TYPE; 
    V_MESSAGE   VARCHAR2(255);
BEGIN

SELECT EMAIL  INTO V_EMAIL FROM EMPLOYEE_FUNCTIONS WHERE EMP_ID=P_EMP_ID;

IF REGEXP_LIKE(V_EMAIL,'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\[a-zA-Z]{2,}$') THEN
    V_MESSAGE := 'Valid Email : ' || V_EMAIL;
ELSE
    V_MESSAGE := 'Invalid EMail ' || V_EMAIL;
END IF;
    RETURN V_MESSAGE;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Employee ID not found.';
    WHEN OTHERS THEN
        RETURN 'An unexpected error occurred.';
END;
/

 DECLARE
    V_RESULT VARCHAR2(255);
    V_EMP_ID NUMBER := 5; -- Replace with the ID of the employee you want to test
BEGIN
    V_RESULT := GET_EMAILID(V_EMP_ID);
    DBMS_OUTPUT.PUT_LINE(V_RESULT);
END;
/
