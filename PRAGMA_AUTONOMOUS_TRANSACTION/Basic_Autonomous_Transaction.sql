-- PRAGMA AUTONOMOUS TRANSACTION DEMO

CREATE TABLE pragma_table (
    emp_id NUMBER PRIMARY KEY,
    emp_name VARCHAR2(100),
    dept_id NUMBER
);

-- Insert sample data
INSERT INTO pragma_table VALUES (1, 'Alice', 101);
INSERT INTO pragma_table VALUES (2, 'Bob', 102);
INSERT INTO pragma_table VALUES (3, 'Charlie', 103);

CREATE TABLE pragma_dept (
    dept_id NUMBER PRIMARY KEY,
    dept_name VARCHAR2(100)
);

-- Insert sample data
INSERT INTO pragma_dept VALUES (101, 'HR');
INSERT INTO pragma_dept VALUES (102, 'Finance');
INSERT INTO pragma_dept VALUES (103, 'Engineering');


CREATE TABLE error_log (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    error_msg VARCHAR2(200),
    log_date DATE
);

-- Insert sample data (optional)
INSERT INTO error_log (error_msg, log_date) VALUES ('First Error', SYSDATE);



-- 1 . Create a table pragma_table with columns emp_id, emp_name, and dept_id. 
-- Write a PL/SQL procedure using PRAGMA AUTONOMOUS_TRANSACTION to insert a new employee record into pragma_table and commit it independently.

CREATE OR REPLACE PROCEDURE ADD_NEW_EMPLOYEE(
P_EMPID IN NUMBER, 
P_EMPNAME IN VARCHAR2,
P_DEPTID IN NUMBER) AS
PRAGMA AUTONOMOUS_TRANSACTION;  -- Enables the procedure to execute independently.
BEGIN
    INSERT INTO pragma_table(EMP_ID,EMP_NAME,DEPT_ID) VALUES(P_EMPID,P_EMPNAME,P_DEPTID);
    COMMIT;
END;
/

BEGIN 
    ADD_NEW_EMPLOYEE(501,'Ganesh',40);
END;
/


SELECT * FROM pragma_dept;
-- 2. Independent Department Logging
-- Create a table pragma_dept with columns dept_id and dept_name. 
--Write an autonomous transaction procedure that logs new department records into pragma_dept,even when the parent transaction fails.
CREATE OR REPLACE PROCEDURE ADD_NEW_RECORD_DEPT
(P_DEPT_ID IN NUMBER,
P_DEPT_NAME IN VARCHAR2) IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO PRAGMA_DEPT VALUES(P_DEPT_ID,P_DEPT_NAME);
    COMMIT;
END;
/

BEGIN
    ADD_NEW_RECORD_DEPT(501,'Technical DEPT');
END;
/

rollback;

-- NOTE: Once we commited the changes in the procedures/packages/functions then we cannot be ROLLBACK again, bcoz they are commited independently using "PRAGMA AUTONOMOUS TRANSACTION"





-- 3.  Write a procedure that uses PRAGMA AUTONOMOUS_TRANSACTION to log any errors that occur in the main transaction into a table named error_log (columns: log_id, error_msg, log_date). 
-- Use the "pragma_table" for the main transaction.
SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE LOG_ERROR
(V_ERROR_MSG         VARCHAR2)
IS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO error_log(ERROR_MSG,LOG_DATE) VALUES(V_ERROR_MSG,SYSDATE);
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_TEST_DATA
(P_EMPID IN NUMBER,
P_EMPNAME IN VARCHAR2,
P_DEPTID IN NUMBER) IS
BEGIN
    INSERT INTO pragma_table(EMP_ID,EMP_NAME,DEPT_ID) VALUES(P_EMPID,P_EMPNAME,P_DEPTID);
    IF P_EMPNAME IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001,'EMP NAME CANNOT BE NULL');
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
        LOG_ERROR(SQLERRM);
        RAISE;
END;
/


BEGIN
    INSERT_TEST_DATA(501,NULL,20);
END;
/

CREATE TABLE missing_dept_log (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    missing_dept_id NUMBER,
    log_date DATE
);

SELECT * FROM pragma_table;
SELECT * FROM pragma_dept;
SELECT * FROM error_log;
select * from missing_dept_log;
desc missing_dept_log;
DESC pragma_dept;
-- Conditional Use of PRAGMA AUTONOMOUS_TRANSACTION
-- Write a PL/SQL block where a new employee is added to pragma_table. If the employee's dept_id is not found in pragma_dept, 
-- use an autonomous transaction to log the missing department ID into a table missing_dept_log. 


--  This logs missing department IDs into the missing_dept_log table.
CREATE OR REPLACE PROCEDURE LOG_MISSING_DEPT (P_DEPTID NUMBER) AS
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO missing_dept_log(MISSING_DEPT_ID,LOG_DATE) values (P_DEPTID,SYSDATE);
    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE ADD_NEW_EMP_MISSING_DEPT
(P_EMPID IN NUMBER,
P_EMPNAME IN VARCHAR2,
P_DEPTID IN NUMBER) IS
v_dept_count number;
BEGIN
    -- Checking whether the entered "DEPTID" is already existed or not.
    SELECT COUNT(*) INTO v_dept_count FROM PRAGMA_DEPT WHERE PRAGMA_DEPT.DEPT_ID = P_DEPTID;
    
    IF v_dept_count =0 THEN
        LOG_MISSING_DEPT(P_DEPTID);
    END IF;

    INSERT INTO pragma_employees(EMP_ID,EMP_NAME,DEPT_ID) VALUES (p_empid,p_empname,p_deptid );
    DBMS_OUTPUT.PUT_LINE('NEW EMPLOYEE ADDED SUCCESSFULLY '|| p_empid);
       
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('An Uxpected Error Occured ! ' || SQLERRM);
END;
/

