-- Intermediate PRAGMA Autonomous Transactions


SELECT * FROM pragma_table;
SELECT * FROM pragma_dept;
SELECT * FROM error_log;
select * from missing_dept_log;

-- Parent and Autonomous Commit Behavior
-- Insert a record into pragma_table within the main transaction and call an autonomous procedure 
-- that inserts into pragma_dept. Trigger an error in the main transaction and observe what happens
-- to the records in both tables.


-- Autonomous procedure to insert data into the department table
CREATE OR REPLACE PROCEDURE INSERT_DEPT_DATA (
    P_DEPTID IN NUMBER,
    P_DEPTNAME IN VARCHAR2
) AS
    PRAGMA AUTONOMOUS_TRANSACTION;  -- This makes the transaction autonomous
BEGIN
    INSERT INTO pragma_dept(DEPT_ID, DEPT_NAME) VALUES (P_DEPTID, P_DEPTNAME);
    COMMIT;  -- Commits immediately, independently of the main transaction
END;
/

-- Main procedure to insert employee data and call the autonomous procedure
CREATE OR REPLACE PROCEDURE INSERT_EMP_DATA (
    P_EMPID IN NUMBER,
    P_EMPNAME IN VARCHAR2,
    P_DEPTID IN NUMBER
) IS
BEGIN
    -- Insert employee data into the main table
    INSERT INTO pragma_table(EMP_ID, EMP_NAME, DEPT_ID) VALUES (P_EMPID, P_EMPNAME, P_DEPTID);

    -- Call the autonomous procedure to insert department data
    INSERT_DEPT_DATA(502, 'Design');
    INSERT_DEPT_DATA(503, 'Recruitment');

    -- Simulate an unexpected error in the main transaction
    RAISE_APPLICATION_ERROR(-20001, 'AN Unexpected Error occurred in Main Transaction');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;  -- This will rollback the main transaction, but not the autonomous transaction
END;
/


-- Begin block to execute the procedure
BEGIN
    INSERT_EMP_DATA(507, 'RAMESH', 103);  -- Try to insert employee data
END;
/




-- 6. Data Consistency Check
-- Write an autonomous transaction procedure that checks if a dept_id exists in pragma_dept.
--If it does not exist, insert it into pragma_dept. Call this procedure from the main transaction,
--which inserts an employee into pragma_table.

CREATE OR REPLACE PROCEDURE CHECK_DEPTID_EXISTS 
(P_DEPTID IN NUMBER,
P_DEPTNAME IN VARCHAR2) 
AS
PRAGMA AUTONOMOUS_TRANSACTION;
V_COUNT number;
BEGIN
    SELECT COUNT(*) INTO V_COUNT FROM pragma_dept where DEPT_ID=P_DEPTID;
    
    IF V_COUNT=0 THEN
    INSERT INTO pragma_dept(DEPT_ID,DEPT_NAME) VALUES (P_DEPTID,P_DEPTNAME);
    COMMIT;
    END IF;
END;
/

BEGIN
    CHECK_DEPTID_EXISTS(505,'DANCING');
    
    INSERT INTO pragma_employees(EMP_ID,EMP_NAME,EMP_DEPT_ID) VALUES(550,'RAM',55);
    INSERT INTO pragma_employees(EMP_ID,EMP_NAME,EMP_DEPT_ID) VALUES(551,'sagar',57);

END;    
/


ALTER TABLE pragma_table RENAME COLUMN DEPT_ID TO EMP_DEPT_ID;


-- 7. Nested Autonomous Transactions
-- Write a PL/SQL block where a procedure inserts an employee into pragma_table. 
--Inside this procedure, call another autonomous transaction procedure that logs 
--the insertion into pragma_dept_log. Simulate a rollback in the main transaction and verify the results.
-- Create table for logging
CREATE TABLE pragma_dept_log (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    emp_id NUMBER,
    dept_id NUMBER,
    log_date DATE
);

-- Autonomous procedure to log insertion
CREATE OR REPLACE PROCEDURE log_insertion (
    p_emp_id IN NUMBER,
    p_dept_id IN NUMBER
) AS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO pragma_dept_log (emp_id, dept_id, log_date)
    VALUES (p_emp_id, p_dept_id, SYSDATE);

    COMMIT; -- Commit the autonomous transaction
END;
/

-- Procedure to insert into pragma_table and log into pragma_dept_log
CREATE OR REPLACE PROCEDURE insert_employee_with_log (
    p_emp_id IN NUMBER,
    p_emp_name IN VARCHAR2,
    p_dept_id IN NUMBER
) IS
BEGIN
    INSERT INTO pragma_table (emp_id, emp_name, EMP_DEPT_ID)
    VALUES (p_emp_id, p_emp_name, p_dept_id);

    -- Call the logging procedure
    log_insertion(44, 45);
END;
/

-- Main transaction with rollback
BEGIN
    insert_employee_with_log(3, 'Charlie', 103);

    -- Simulate an error
    RAISE_APPLICATION_ERROR(-20001, 'Simulated rollback in main transaction');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- Verify results
SELECT * FROM pragma_table;
SELECT * FROM pragma_dept_log;


--8. Simulated Rollback
--Simulate a situation where the main transaction inserts a record into pragma_table,
--but due to an error, it is rolled back. Use an autonomous transaction to log the
--rollback event into transaction_log.

-- Create transaction log table
CREATE TABLE transaction_log (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    action VARCHAR2(200),
    log_date DATE
);

-- Autonomous procedure to log rollback events
CREATE OR REPLACE PROCEDURE log_rollback_event (
    p_action IN VARCHAR2
) AS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    INSERT INTO transaction_log (action, log_date)
    VALUES (p_action, SYSDATE);

    COMMIT; -- Commit the autonomous transaction
END;
/

-- Main transaction
BEGIN
    -- Insert into pragma_table
    INSERT INTO pragma_table (emp_id, emp_name, EMP_dept_id)
    VALUES (4, 'David', 104);

    -- Simulate an error
    RAISE_APPLICATION_ERROR(-20001, 'Simulated error for rollback');

EXCEPTION
    WHEN OTHERS THEN
        -- Log the rollback event
        log_rollback_event('Main transaction rolled back due to error');
        ROLLBACK;
END;
/

-- Verify results
SELECT * FROM pragma_table;
SELECT * FROM transaction_log;




--9. Sequence Number Generation
--Create a sequence to generate emp_id for pragma_table. Write a procedure that uses 
--PRAGMA AUTONOMOUS_TRANSACTION to insert a record into pragma_table using the sequence, ensuring the emp_id is not rolled back with the main transaction.

-- Create a sequence for emp_id
CREATE SEQUENCE emp_id_seq START WITH 5 INCREMENT BY 1;

-- Procedure to use sequence and autonomous transaction
CREATE OR REPLACE PROCEDURE insert_employee_with_sequence (
    p_emp_name IN VARCHAR2,
    p_dept_id IN NUMBER
) AS
    PRAGMA AUTONOMOUS_TRANSACTION;
    v_emp_id NUMBER;
BEGIN
    -- Get the next value from the sequence
    v_emp_id := emp_id_seq.NEXTVAL;

    -- Insert into pragma_table
    INSERT INTO pragma_table (emp_id, emp_name, EMP_dept_id)
    VALUES (v_emp_id, p_emp_name, p_dept_id);

    COMMIT; -- Commit the autonomous transaction
END;
/

-- Call the procedure
BEGIN
--    insert_employee_with_sequence('Eve', 105);
      insert_employee_with_sequence('HENNA', 106);
      insert_employee_with_sequence('TAM', 108);


END;
/

-- Verify results
SELECT * FROM pragma_table;




--10. Dynamic SQL in Autonomous Transactions
--Write a procedure using PRAGMA AUTONOMOUS_TRANSACTION to execute dynamic SQL for inserting a record into pragma_dept. 
--Call this procedure from a PL/SQL block that handles the main transaction for inserting into pragma_table.    what are the tables need for this create that table and insert 3 rows in each table

-- Procedure to execute dynamic SQL for pragma_dept
CREATE OR REPLACE PROCEDURE dynamic_insert_into_dept (
    p_dept_id IN NUMBER,
    p_dept_name IN VARCHAR2
) AS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    EXECUTE IMMEDIATE 'INSERT INTO pragma_dept (dept_id, dept_name) VALUES (:1, :2)'
    USING p_dept_id, p_dept_name;

    COMMIT; -- Commit the autonomous transaction
END;
/

-- Main block to call dynamic insert and handle pragma_table
BEGIN
    -- Call dynamic SQL procedure
    dynamic_insert_into_dept(106, 'Sales');

    -- Insert into pragma_table
    INSERT INTO pragma_table (emp_id, emp_name, EMP_dept_id)
    VALUES (64, 'Frank', 106);
END;
/

-- Verify results
SELECT * FROM pragma_table;
SELECT * FROM pragma_dept;



