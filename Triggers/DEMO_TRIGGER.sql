-- Triggers 

-- Creating an Employee table to store employee Data.
CREATE TABLE TRIGGER_EMPLOYEE (
   EMPLOYEE_ID   NUMBER(5) PRIMARY KEY,
   NAME          VARCHAR2(50),
   DEPARTMENT_ID NUMBER(5),
   SALARY        NUMBER(10, 2),
   HIRE_DATE     DATE DEFAULT SYSDATE
);

-- Creating a AUDIT_LOG Table 
CREATE TABLE TRIGGER_AUDIT_LOG (
   LOG_ID        NUMBER(5) PRIMARY KEY,
   EMPLOYEE_ID   NUMBER(5),
   OLD_SALARY    NUMBER(10, 2),
   NEW_SALARY    NUMBER(10, 2),
   CHANGE_DATE   DATE
);


CREATE TABLE TRIGGER_ERROR_LOG (
   ERROR_ID      NUMBER(5) PRIMARY KEY,
   EMPLOYEE_ID   NUMBER(5),
   NAME          VARCHAR2(50),
   DEPARTMENT_ID NUMBER(5),
   INVALID_SALARY NUMBER(10, 2),
   ERROR_DATE    DATE
);



SELECT * FROM TRIGGER_EMPLOYEE;
SELECT * FROM TRIGGER_AUDIT_LOG;
SELECT * FROM TRIGGER_ERROR_LOG;
DESC TRIGGER_ERROR_LOG;

--The salary of an employee must be at least 3000.
--If an invalid salary is inserted or updated, the trigger prevents it by raising an error.
--Additionally, log valid salary updates into an audit_log table.

CREATE OR REPLACE TRIGGER CHECK_SALARY 
BEFORE INSERT OR UPDATE ON TRIGGER_EMPLOYEE
FOR EACH ROW
DECLARE
    V_ERROR_ID NUMBER;
    V_Log_ID NUMBER;
BEGIN
    -- Validate the Salary (Insertion Check)
    IF :NEW.SALARY < 3000 THEN
        SELECT NVL(MAX(ERROR_ID),0)+1 INTO V_ERROR_ID FROM TRIGGER_ERROR_LOG;
        INSERT INTO TRIGGER_ERROR_LOG(ERROR_ID,EMPLOYEE_ID,NAME,DEPARTMENT_ID,INVALID_SALARY,ERROR_DATE) VALUES
        (V_ERROR_ID,:NEW.EMPLOYEE_ID,:NEW.NAME,:NEW.DEPARTMENT_ID,:NEW.SALARY,SYSDATE);
        RAISE_APPLICATION_ERROR(-20001,'Salary Must be Greater than 3000 !');
    END IF;
    
    -- Log Salary Changes (Only for Updating)
    IF UPDATING THEN
        SELECT NVL(MAX(LOG_ID),0)+1 INTO V_Log_ID FROM TRIGGER_AUDIT_LOG;
        
        -- Insert change details into audit_log
        INSERT INTO TRIGGER_AUDIT_LOG(LOG_ID,EMPLOYEE_ID,OLD_SALARY,NEW_SALARY,CHANGE_DATE) VALUES
        (V_LOG_ID,:NEW.EMPLOYEE_ID,:OLD.SALARY,:NEW.SALARY,SYSDATE);
    END IF;
END;
/

DESC TRIGGER_EMPLOYEE;

INSERT INTO TRIGGER_EMPLOYEE(EMPLOYEE_ID,NAME,DEPARTMENT_ID,SALARY,HIRE_DATE) VALUES 
(102,'REHMAN',30,3900,'12-AUG-2021');

INSERT INTO TRIGGER_EMPLOYEE(EMPLOYEE_ID,NAME,DEPARTMENT_ID,SALARY,HIRE_DATE) VALUES 
(103,'KALAM',10,6500,'09-DEC-2020');

INSERT INTO TRIGGER_EMPLOYEE(EMPLOYEE_ID,NAME,DEPARTMENT_ID,SALARY,HIRE_DATE) VALUES 
(104,'HARISH',20,9800,'27-JAN-2025');

INSERT INTO TRIGGER_EMPLOYEE(EMPLOYEE_ID,NAME,DEPARTMENT_ID,SALARY,HIRE_DATE) VALUES 
(105,'JOHN',10,3400,'12-SEP-2029');


SELECT * FROM TRIGGER_EMPLOYEE;
SELECT * FROM TRIGGER_AUDIT_LOG;

-- Updating Salary of empid:101 from 3400 to 6800
UPDATE TRIGGER_EMPLOYEE SET SALARY=6800 WHERE EMPLOYEE_ID=101;

-- Updating Name of empid:102 from 'REHMAN' to 'RAM'.
-- If we update the "NAME" Column means then the salary column in "TRIGGER_AUDIT_LOG" Table will not be updated. 
UPDATE TRIGGER_EMPLOYEE SET NAME='RAM' WHERE EMPLOYEE_ID=102;

SELECT * FROM TRIGGER_ERROR_LOG;

-- Testing For Salary <3000
INSERT INTO TRIGGER_EMPLOYEE(EMPLOYEE_ID, NAME, DEPARTMENT_ID, SALARY, HIRE_DATE) VALUES 
(201, 'ABRAHAM', 20, 2000, '11-DEC-2021');

INSERT INTO TRIGGER_EMPLOYEE(EMPLOYEE_ID,NAME,DEPARTMENT_ID,SALARY,HIRE_DATE) VALUES 
(201,'ABRAHAM',20,300,'11-DEC-2021');


-- NOTE: Here Error data is not inserted into "TRIGGER_ERROR_LOG" Table bcoz "RAISE_APPLICATION_ERROR" will be rollbacked.


