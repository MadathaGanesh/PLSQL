-- Intermediate Question - 3

--Q3. Audit Insert/Update/Delete Operations
--Develop a trigger to handle audit logging for any INSERT, UPDATE, or DELETE operation on the EMPLOYEE table. 
--Store the changes in an EMPLOYEE_CHANGE_LOG table with columns: EMP_ID, ACTION_TYPE, OLD_VALUES, NEW_VALUES, ACTION_DATE.

-- Main Table
CREATE TABLE Q3_INTERMEDIATE_EMPLOYEE (
    EMP_ID NUMBER PRIMARY KEY, -- Employee ID
    NAME VARCHAR2(100),        -- Employee name
    DESIGNATION VARCHAR2(50),  -- Employee designation (e.g., Manager, Developer)
    SALARY NUMBER(10, 2),      -- Employee salary
    BONUS NUMBER(10, 2),       -- Employee bonus
    HIRE_DATE DATE             -- Employee hire date
);

-- Table to store changed details
CREATE TABLE INTERMEDIATE_EMPLOYEE_CHANGE_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Unique log identifier
    EMP_ID NUMBER NOT NULL, -- Employee ID being audited
    ACTION_TYPE VARCHAR2(20) NOT NULL, -- Type of action: INSERT, UPDATE, DELETE
    OLD_VALUES CLOB, -- Old values in JSON format (or plain text)
    NEW_VALUES CLOB, -- New values in JSON format (or plain text)
    ACTION_DATE DATE DEFAULT SYSDATE, -- Date and time of the action
    USER_NAME VARCHAR2(50) NOT NULL -- Database user performing the action
);


SET SERVEROUTPUT ON;
-- The CLOB (Character Large Object) data type in Oracle is used to store large amounts of character data, typically for unstructured data like JSON, XML, plain text, or large documents
CREATE OR REPLACE TRIGGER TRG_EMPLOYEE_AUDIT 
AFTER INSERT OR UPDATE OR DELETE ON Q3_INTERMEDIATE_EMPLOYEE
FOR EACH ROW
DECLARE
    V_OLD_VALUES     CLOB;
    V_NEW_VALUES     CLOB;
BEGIN
    -- For DELETE Operation
    IF DELETING THEN
        -- Capturing all old values as a JSON string or plain text, without acessing them individually.
        V_OLD_VALUES := '{
        "EMP_ID"        :' || :OLD.EMP_ID ||',
        "NAME"          :"'|| :OLD.NAME || '",
        "DESIGNATION"   :"'|| :OLD.DESIGNATION ||'",
        "SALARY"        :'|| NVL(:OLD.SALARY,0) ||',
        "BONUS"         :'|| NVL(:OLD.BONUS,0)||',
        "HIRE_DATE"     :"'|| TO_CHAR(:OLD.HIRE_DATE,'YYYY-MM-DD') ||'"
        }';
        
        INSERT INTO INTERMEDIATE_EMPLOYEE_CHANGE_LOG 
        (EMP_ID,ACTION_TYPE,OLD_VALUES,NEW_VALUES,ACTION_DATE,USER_NAME) VALUES
        (:OLD.EMP_ID,'DELETE',V_OLD_VALUES,NULL,SYSDATE,USER);
        
    
    -- For Insert Operation
    ELSIF INSERTING THEN
    -- Capturing all new values as a JSON String or Plain text format to insert into table
    V_NEW_VALUES := '{
    "EMP_ID" : ' || :NEW.EMP_ID||',
    "NAME"   : "'  || :NEW.NAME||'",
    "DESIGNATION" : "'|| :NEW.DESIGNATION|| '",
    "SALARY" : '||NVL(:NEW.SALARY,0)||',
    "BONUS": '|| NVL(:NEW.BONUS,0)||',
    "HIRE_DATE":"' || TO_CHAR(:NEW.HIRE_DATE,'YYYY-MM-DD') ||'"
    }';
    
    INSERT INTO INTERMEDIATE_EMPLOYEE_CHANGE_LOG 
    (EMP_ID,ACTION_TYPE,OLD_VALUES,NEW_VALUES,ACTION_DATE,USER_NAME) VALUES
    (:NEW.EMP_ID,'INSERT',NULL,V_NEW_VALUES,SYSDATE,USER);
    
    
    -- For Update operation
    ELSIF UPDATING THEN
    -- Capturing all old Values as a JSON String format
    V_OLD_VALUES := '{
    "EMP_ID": '||:OLD.EMP_ID ||',
    "NAME":" '|| :OLD.NAME||'",
    "DESIGNATION":"'||:OLD.DESIGNATION||'",
    "SALARY": '||NVL(:OLD.SALARY,0)||',
    "BONUS":'||NVL(:OLD.BONUS,0)||',
    "HIRE_DATE":"'||TO_CHAR(:OLD.HIRE_DATE,'YYYY-MM-DD')||'"
    }';
    
     -- Capturing all new Values as a JSON String format
    V_NEW_VALUES := '{
    "EMP_ID":'||:NEW.EMP_ID||',
    "NAME":"'||:NEW.NAME||'",
    "DESIGNATION":"'||:NEW.DESIGNATION||'",
    "SALARY":'||NVL(:NEW.SALARY,0)||',
    "BONUS":'||NVL(:NEW.BONUS,0)||',
    "HIRE_DATE":"'||TO_CHAR(:OLD.HIRE_DATE,'YYYY-MM-DD')||'"
    }';
    
    INSERT INTO INTERMEDIATE_EMPLOYEE_CHANGE_LOG 
    (EMP_ID,ACTION_TYPE,OLD_VALUES,NEW_VALUES,ACTION_DATE,USER_NAME) VALUES
    (:OLD.EMP_ID,'UPDATE',V_OLD_VALUES,V_NEW_VALUES,SYSDATE,USER);
        
    END IF;
END;
/


INSERT INTO Q3_INTERMEDIATE_EMPLOYEE (EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE)
VALUES (201, 'Dinesh', 'Developer', 60000, 5000, TO_DATE('2020-01-15', 'YYYY-MM-DD'));

INSERT INTO Q3_INTERMEDIATE_EMPLOYEE (EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE)
VALUES (202, 'rakesh', 'Manager', 80000, 10000, TO_DATE('2023-05-10', 'YYYY-MM-DD'));

UPDATE Q3_INTERMEDIATE_EMPLOYEE SET SALARY = 70000, BONUS = 7000 WHERE EMP_ID = 201;


SELECT * FROM Q3_INTERMEDIATE_EMPLOYEE;
SELECT * FROM INTERMEDIATE_EMPLOYEE_CHANGE_LOG;




