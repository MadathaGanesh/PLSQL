-- Intermediate Triggers

CREATE TABLE INTERMEDIATE_EMP_TRIGGER (
    EMP_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100),
    DESIGNATION VARCHAR2(50),
    SALARY NUMBER(10, 2),
    BONUS NUMBER(10, 2),
    HIRE_DATE DATE,
    TOTAL_COMPENSATION NUMBER(10, 2),
    LAST_MODIFIED_BY VARCHAR2(50)
);



-- This Table "UPDATED_SALARY_LOG" is used to store UPDATED salary details
CREATE TABLE INTERMEDIATE_UPDATED_SALARY_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMP_ID NUMBER,
    OLD_SALARY NUMBER(10, 2),
    NEW_SALARY NUMBER(10, 2),
    TOTAL_COMPENSATION NUMBER(10, 2),
    UPDATED_DATE DATE
);

-- Cascading Update Trigger
-- Write a trigger that automatically updates a TOTAL_COMPENSATION column in the INTERMEDIATE_UPDATED_SALARY_LOG table
-- whenever the BONUS or SALARY column is updated. Assume TOTAL_COMPENSATION = SALARY + BONUS.
CREATE OR REPLACE TRIGGER UPDATE_TOTAL_COMPENSATION
BEFORE UPDATE ON INTERMEDIATE_EMP_TRIGGER
FOR EACH ROW
BEGIN
    :NEW.TOTAL_COMPENSATION := :NEW.SALARY + NVL(:NEW.BONUS,0);
    INSERT INTO INTERMEDIATE_UPDATED_SALARY_LOG (EMP_ID,OLD_SALARY,NEW_SALARY,TOTAL_COMPENSATION,UPDATED_DATE)
    VALUES (:OLD.EMP_ID,:OLD.SALARY,:NEW.SALARY,:NEW.TOTAL_COMPENSATION,SYSDATE);
    DBMS_OUTPUT.PUT_LINE('Salary Updated for EMPID - ' || :OLD.EMP_ID || ' . OLD SALARY IS : '||
    :OLD.SALARY || ' . UPDATED SALARY IS : '|| :NEW.SALARY ||' .Updated Bonus is :'|| :NEW.BONUS || ' . Updated Total Compensation is : ' || :NEW.TOTAL_COMPENSATION);
END;
/
-- Testing
UPDATE INTERMEDIATE_EMP_TRIGGER SET SALARY=20000,BONUS=2000 WHERE EMP_ID=1;
UPDATE INTERMEDIATE_EMP_TRIGGER SET SALARY=30000,BONUS=3000 WHERE EMP_ID=2;

SELECT * FROM INTERMEDIATE_EMP_TRIGGER;
SELECT * FROM INTERMEDIATE_UPDATED_SALARY_LOG;

CREATE TABLE DECREASED_SALARY (
EMP_ID NUMBER,
NAME VARCHAR2(100),
OLD_SALARY NUMBER(10,2),
NEW_SALARY NUMBER(10,2)
)

-- Q2. Before Update Validation Trigger
-- Create a trigger to prevent the SALARY column from being decreased. 
-- If an attempt is made to lower the salary, raise an exception.
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER PREVENT_SALARY_DECREASE 
BEFORE UPDATE ON INTERMEDIATE_EMP_TRIGGER
FOR EACH ROW
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
     IF :NEW.SALARY < :OLD.SALARY THEN
        INSERT INTO DECREASED_SALARY (EMP_ID,NAME,OLD_SALARY,NEW_SALARY) VALUES
        (:OLD.EMP_ID,:OLD.NAME,:OLD.SALARY,:NEW.SALARY);
        COMMIT;
    END IF;
    
    IF :NEW.SALARY < :OLD.SALARY THEN
--    INSERT INTO DECREASED_SALARY (EMP_ID,NAME,OLD_SALARY,NEW_SALARY) VALUES
--        (:OLD.EMP_ID,:OLD.NAME,:OLD.SALARY,:NEW.SALARY);
        DBMS_OUTPUT.PUT_LINE('EMP ID '||  :OLD.EMP_ID || ' - New salary should not be Less than Old Salary ! ');
        RAISE_APPLICATION_ERROR(-20043,'New salary should not be Less than Old Salary ! ');
    END IF;
END;
/


UPDATE INTERMEDIATE_EMP_TRIGGER SET SALARY = 2000 WHERE EMP_ID = 1;
UPDATE INTERMEDIATE_EMP_TRIGGER SET SALARY = 100 WHERE EMP_ID = 5;


SELECT * FROM DECREASED_SALARY;
SELECT * FROM INTERMEDIATE_EMP_TRIGGER;







-- Insert records into INTERMEDIATE_EMP_TRIGGER table
INSERT INTO INTERMEDIATE_EMP_TRIGGER 
(EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE, TOTAL_COMPENSATION, LAST_MODIFIED_BY) 
VALUES 
(1, 'John Doe', 'Software Engineer', 60000, 5000, TO_DATE('2023-05-10', 'YYYY-MM-DD'), 65000, 'Admin');

INSERT INTO INTERMEDIATE_EMP_TRIGGER 
(EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE, TOTAL_COMPENSATION, LAST_MODIFIED_BY) 
VALUES 
(2, 'Jane Smith', 'Project Manager', 80000, 10000, TO_DATE('2022-10-20', 'YYYY-MM-DD'), 90000, 'Admin');

INSERT INTO INTERMEDIATE_EMP_TRIGGER 
(EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE, TOTAL_COMPENSATION, LAST_MODIFIED_BY) 
VALUES 
(3, 'Robert Brown', 'HR Specialist', 50000, NULL, TO_DATE('2021-03-15', 'YYYY-MM-DD'), 50000, 'Admin');

INSERT INTO INTERMEDIATE_EMP_TRIGGER 
(EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE, TOTAL_COMPENSATION, LAST_MODIFIED_BY) 
VALUES 
(4, 'Emily Davis', 'Business Analyst', 70000, 7000, TO_DATE('2020-11-25', 'YYYY-MM-DD'), 77000, 'Admin');

INSERT INTO INTERMEDIATE_EMP_TRIGGER 
(EMP_ID, NAME, DESIGNATION, SALARY, BONUS, HIRE_DATE, TOTAL_COMPENSATION, LAST_MODIFIED_BY) 
VALUES 
(5, 'Michael Johnson', 'MANAGER', 90000, 12000, TO_DATE('2019-07-05', 'YYYY-MM-DD'), 102000, 'Admin');


